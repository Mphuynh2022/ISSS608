---
title: "Hands-on_Ex04"
author: "Huynh Minh Phuong"
execute:
  echo: true 
  eval: true
  warning: false
---

# Visual Statistical analysis

## Getting Started

### Install and launch R packages

```{r}
pacman::p_load(ggstatsplot, tidyverse)
```

### Import data

```{r}
exam <- read_csv("data/Exam_data.csv")
```

### One-sample test: *gghistostats()* method

A Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.

```{r}
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  xlab = "English scores"
)
```

### Two-sample mean test: *ggbetweenstats()* method

Two-sample mean test of Maths scores by gender.

```{r}
ggbetweenstats(
  data = exam,
  x = GENDER, 
  y = MATHS,
  type = "np",
  messages = FALSE
)
```

"ns" → only non-significant "s" → only significant "all" → everything

### Oneway ANOVA Test: *ggbetweenstats()* method

One-way ANOVA test on English score by race.

```{r}
ggbetweenstats(
  data = exam,
  x = RACE, 
  y = ENGLISH,
  type = "p",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE
)
```

### Significant Test of Correlation: *ggscatterstats()*

Significant Test of Correlation between Maths scores and English scores.

```{r}
ggscatterstats(
  data = exam,
  x = MATHS,
  y = ENGLISH,
  marginal = FALSE,
  )
```

### Significant Test of Association: *ggbarstats()* methods

Maths scores is binned into a 4-class variable by using *cut()*.

```{r}
exam1 <- exam %>% 
  mutate(MATHS_bins = 
           cut(MATHS, 
               breaks = c(0,60,75,85,100))
)
```

Significant Test of Association between Maths score and gender.

```{r}
ggbarstats(exam1, 
           x = MATHS_bins, 
           y = GENDER)
```

## Visualizing Models

Toyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.

### Install and load neccessary libraries and import dataset

```{r}
pacman::p_load(readxl, performance, parameters, see)
car_resale <- read_xls("data/ToyotaCorolla.xls", 
                       "data")
car_resale
```

### Multiple Regression Model using *lm()*

```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + 
              Weight + Guarantee_Period, data = car_resale)
model
```

### Model Diagnostic: checking for multicolinearity:

Use *check_collinearity()* of *performance* package

```{r}
check_collinearity(model)
```

```{r}
check_c <- check_collinearity(model)
plot(check_c)
```

### Model Diagnostic: checking normality assumption

Use *check_normality()* of *performance* package

```{r}
model1 <- lm(Price ~ Age_08_04 + KM + 
              Weight + Guarantee_Period, data = car_resale)

check_n <- check_normality(model1)

plot(check_n)
```

### Model diagnostic: Check model for homogeneity of variances

Use *check_heteroscedasticity()* of *performance* package

```{r}
check_h <- check_heteroscedasticity(model1)

plot(check_h)
```

### Model Diagnostic: Complete check

Use *check_model()*.

```{r}
check_model(model1)

```

### Visualising Regression Parameters: see methods

*plot()* of *see* package and *parameters()* of *parameters* package is used to visualise the parameters of a regression model.

```{r}
plot(parameters(model1))
```

### Visualising Regression ParametersL ggcoefstats() methods

Use *ggcoefstats()* of *ggstatsplot* package to visualise the parameters of a regression model

```{r}
ggcoefstats(model1, 
            output = "plot")
```

# Visualizing Uncertainty

## Visualizing Uncertainty of Point Estimates

```{r}
pacman::p_load(tidyverse, plotly, crosstalk, DT, ggdist, gganimate)
exam <- read_csv("data/Exam_data.csv")
```

### Visualizing uncertainty of point estimates: *ggplot2* methods

```{r}
my_sum <- exam %>%
  group_by(RACE) %>%
  summarise(
    n=n(),
    mean=mean(MATHS),
    sd=sd(MATHS)
    ) %>%
  mutate(se=sd/sqrt(n-1))

knitr::kable(head(my_sum), format = 'html')
```

Plot the standard error of mean maths score by race.

```{r}
ggplot(my_sum) +
  geom_errorbar(
    aes(x=reorder(RACE,-mean), 
        ymin=mean-se, 
        ymax=mean+se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    size=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  labs(x="Race") +
  ggtitle("Standard error of mean 
          maths score by race")
```

Plot the 95% confidence interval of mean maths score by race.

```{r}
ggplot(my_sum) +
  geom_errorbar(
    aes(x=reorder(RACE,-mean), 
        ymin=mean-1.96*se, 
        ymax=mean+1.96*se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    size=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  labs(x="Race") +
  ggtitle("95% confidence interval of mean 
          maths score by race")+
  theme_minimal()
```

Plot interactive error bars for the 99% confidence interval of mean maths score by race.

```{r}
d <- highlight_key(my_sum) 
p <- ggplot(d) +
  geom_errorbar(
    aes(x=reorder(RACE,-mean), 
        ymin=mean-2.58*se, 
        ymax=mean+2.58*se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    size=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean,
            text=paste("Race:", RACE,
                     "<br>N:", n,
                     "<br>Avg. Scores:", round(mean, digits = 2),
                     "<br>99% CI:[", round(mean - 2.58*se, digits = 2), ", ", round(mean + 2.58*se, digits = 2), "]")), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  labs(x="Race") +
  ggtitle("99% confidence interval of mean 
          maths score by race")+
  theme_minimal()

gg <- highlight(ggplotly(p, tooltip="text"),        
                "plotly_selected")

dt <- DT::datatable(d,
                    colnames = c("","No. of pupils", "Avg Scores", "Std Dev", "Std Error")) |> 
  formatRound(columns = c("mean", "sd", "se"), digits = 2)

crosstalk::bscols(gg,               
                  dt, 
                  widths = 5)  
```

### Visualising Uncertainty: *ggdist* package

*stat_pointinterval()* of *ggdist* is used to build a visual for displaying distribution of maths scores by race.

```{r}
exam %>%
  ggplot(aes(x = RACE, 
             y = MATHS)) +
  stat_pointinterval() +   #<<
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Mean Point + Multiple-interval plot")
```

Showing 95% and 99% confidence interval with mean

```{r}
exam %>% 
  ggplot(aes(x = RACE,
             y = MATHS)) +
  
  #refer to point_interval argument in stat_pointinterval() help
  stat_pointinterval(
    .point = mean,
    .interval = c(qi(0.05), qi(0.01))    
  ) +
  
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Mean Point + Multiple-interval plot"
  )
```

*stat_gradientinterval()* of *ggdist* is used to build a visual for displaying distribution of maths scores by race.

```{r}
#| warning: FALSE
exam %>%
  ggplot(aes(x = RACE, 
             y = MATHS)) +
  stat_gradientinterval(   
    fill = "skyblue",      
    show.legend = TRUE     
  ) +                        
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Gradient + interval plot")
```

## Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)

```{r}
#devtools::install_github("wilkelab/ungeviz", force = TRUE)
library(ungeviz)
```

```{r}
#| warnings: False
ggplot(data = exam, 
       (aes(x = factor(RACE), y = MATHS))) +
  geom_point(position = position_jitter(
    height = 0.3, width = 0.05), 
    size = 0.4, color = "#0072B2", alpha = 1/2) +
  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = "#D55E00") +
  theme_bw() + 
  # `.draw` is a generated column indicating the sample draw
  transition_states(.draw, 1, 3)+
  xlab("Race")
```

# Funnel Plots for Fair Comparisons

## Getting started

```{r}
pacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)
```

```{r}
covid19 <- read_csv("data/COVID-19_DKI_Jakarta.csv") %>%
  mutate_if(is.character, as.factor)

covid19
```

## FunnelPlotR methods

*FunnelPlotR* package requires a numerator (events of interest), denominator (population to be considered) and group:

limit: plot limits (95 or 99). label_outliers: label outliers (true or false). Poisson_limits: add Poisson limits to the plot. OD_adjust: add overdispersed limits to the plot. xrange and yrange: specify the range to display for axes

```{r}
funnel_plot(
  numerator = covid19$Death,
  denominator = covid19$Positive,
  group = covid19$`Sub-district`,
  data_type = "PR",   
  xrange = c(0, 6500),  
  yrange = c(0, 0.05),
  label = NA,
  title = "Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases", #<<           
  x_label = "Cumulative COVID-19 Positive Cases", #<<
  y_label = "Cumulative Fatality Rate"  #<<
)
```

## Funnel Plot for Fair Visual Comparison: *ggplot2* methods

Derive cumulative death rate and standard error of cumulative death rate.

```{r}
df <- covid19 %>%
  mutate(rate = Death / Positive) %>%
  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %>%
  filter(rate > 0)
```

Compute *fit.mean*

```{r}
fit.mean <- weighted.mean(df$rate, 1/df$rate.se^2)
```

Calculate lower and upper limits for 95% and 99.9% CI

```{r}
number.seq <- seq(1, max(df$Positive), 1)
number.ll95 <- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul95 <- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ll999 <- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul999 <- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
dfCI <- data.frame(number.ll95, number.ul95, number.ll999, 
                   number.ul999, number.seq, fit.mean)
```

### Plot a static funnel plot

```{r}
p <- ggplot(df, aes(x = Positive, y = rate)) +
  geom_point(aes(label=`Sub-district`), 
             alpha=0.4) +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll999), 
            size = 0.4, 
            colour = "grey40") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul999), 
            size = 0.4, 
            colour = "grey40") +
  geom_hline(data = dfCI, 
             aes(yintercept = fit.mean), 
             size = 0.4, 
             colour = "grey40") +
  coord_cartesian(ylim=c(0,0.05)) +
  annotate("text", x = 1, y = -0.13, label = "95%", size = 3, colour = "grey40") + 
  annotate("text", x = 4.5, y = -0.18, label = "99%", size = 3, colour = "grey40") + 
  ggtitle("Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases") +
  xlab("Cumulative Number of COVID-19 Cases") + 
  ylab("Cumulative Fatality Rate") +
  theme_light() +
  theme(plot.title = element_text(size=12),
        legend.position = c(0.91,0.85), 
        legend.title = element_text(size=7),
        legend.text = element_text(size=7),
        legend.background = element_rect(colour = "grey60", linetype = "dotted"),
        legend.key.height = unit(0.3, "cm"))
p
```

### Plot Interactive funnel plot

Use *ggplotly()* of plotly r package.

```{r}
fp_ggplotly <- ggplotly(p,
  tooltip = c("label", 
              "x", 
              "y"))
fp_ggplotly
```
